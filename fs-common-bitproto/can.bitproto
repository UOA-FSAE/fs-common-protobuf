proto can

/* =============== AMS ================= */	

/* Current ID: 0x101 */
message AMSReport {
    /* Below are AIR Relay Feedback States */
    bool AIR_POS = 6;   /* AIR Positive Relay State. 1 is closed, 0 is open */
    bool PRECHARGE = 7;   /* Precharge Relay State. 1 is closed, 0 is open */
    bool AIR_NEG = 8;   /* AIR Negative Relay State. 1 is closed, 0 is open */

    /* Below are AMS's GPIO state */
    bool AMS_AUX_GPIO1 = 9;   /* AMS's AUX GPIO 1 state, reserved for future purpose. */
    bool AMS_AUX_GPIO2 = 10;  /* AMS's AUX GPIO 1 state, reserved for future purpose. */
    bool AMS_AUX_GPIO3 = 11;  /* AMS's AUX GPIO 1 state, reserved for future purpose. */
    bool AMS_AUX_GPIO4 = 12;  /* AMS's AUX GPIO 1 state, reserved for future purpose. */
    bool AMS_AUX_GPIO5 = 13;  /* AMS's AUX GPIO 1 state, reserved for future purpose. */
    bool AMS_AUX_GPIO6 = 14;  /* AMS's AUX GPIO 1 state, reserved for future purpose. */
    bool AMS_AUX_GPIO7 = 15;  /* AMS's AUX GPIO 1 state, reserved for future purpose. */

    /* Below is about AMS firmware version*/
    int8 AMS_firmware_version = 17;  /* Current AMS Firmware's version or equivalent info */

}

/* Current ID: 0x103 */
message ACCReport {
    /* Below are SHDN report from ACC*/
    bool IMD = 1;   /* Imd fault */
    bool valid_cell_count = 2; /* If the number of cells found by BMS is equal to expected number of cells */
    bool is_orion_stale = 3; /* If the orion gone stale */
    bool is_over_temperature = 4; /* If the temperature of the cells is above the threshold */
    bool is_warn_temperature = 5; /* If the temperature of the cells is over the warning the threshold */
    bool is_over_voltage = 6; /* If the voltage of the cells is above the threshold */
    bool is_under_voltage = 7; /* If the voltage of the cells is below the threshold */
    bool is_ams_fault = 8; /* If the AMS caused an AMS SHDN, it is 1, when okay its 0*/
    bool is_precharge_over_temp = 9; /* It reports AIR_CONTROL_ALI_STM_TMP_FAULT_LATCH's state set bit to be 1 if Fault otherwise 0, AIR_Control has SHDN circuit so do not need to tirgger AMS SHDN*/
    bool is_bms_alive = 10; /* If the BMS is still alive */

    /* Below are the IMD_STM_MEAS's frequency data, also refer to Bender IMD datasheet in section "Output Measurement" */
    bool IMD_Normal = 11; /* IMD in normal state, will read 10Hz square wave */
    bool IMD_UVLO = 12; /* IMD Under Voltage Lock Out, will read 20Hz square wave */
    bool IMD_StartUp = 13; /* IMD in start up fast insulation measure mode, only for first 2 seconds */    
    bool IMD_error = 14; /* 1 if IMD device reports error, this is device error not insulation fault, will read 40Hz square wave */
    bool IMD_earth_connection_fault = 15; /* 1 if IMD detected earth conneciton fault, wil lread 50Hz square wave */
    uint8 IMD_meas_dutycycle = 17; /* A 0 ~ 100 percentage value that represent the insulation quality measured from IMD. It is measured from IMD_STM_MEAS square_wave's duty cycle in normal_state, the 10Hz square wave */
}

/* Current ID: 0x105 */
message AMSError {
    bool precharge_completed = 8;   /* Only send this message with value of 1 at bit 7 once when precharge completed, so rising edge only. */
}

/* Current ID: 0x106 */
message AccNotReady{
    bool acc_not_ready = 8; /* Send this message when the ACC is not ready to enter TS Active mode. */
}


/* =============== Go-Kart ================= */	

// TODO below are the specific bit lengths needed on the CAN frame for each	
// value. Either values need to be shift encoded into a single/two 32 bit ints	
// or masking on values should be specified.	

/* Orin -> Nano */
/* Current ID: 0x300 */
/* size 6 bytes */
message Ackermann {	
    int8 speed = 1; /* Desired speed of the car. Must be between 0 and 120 km/h. */	
    int8 acceleration = 2; /* Desired acceleration. Must be between 0 and 256 m/s^2. */	
    int8 jerk = 3; /* Desired jerk. Must be between 0 and 1 m/s^3. */	
    int16 steering_angle = 4; /* Desired steering_angle. Must be between -45 and 45 degrees. */	
    int8 steering_angle_velocity = 5; /* Desired_angle_velocity. Must be between 0 and 1 radians/s. */	
}

// double check this is not a duplicate of a sufficient pre-existing can message 
/* Motec -> Orin	
/* Current ID: 0x301 */	
/* size 3 bytes */	
message motionActual {	
    int8 velocity = 1;	
    int16 steering = 2;	
}

//* Data Logging	

/* Required ID: 0x500 */	
/* size 8 bytes */	
message DrivingDynamics1 {	
    uint8 speed_actual = 1; /* bit 0-7 */  	
    uint8 speed_target = 2; /* bit 8-15 */  	
    int8 steering_angle_actual = 3; /* bit 16-23 */	
    int8 steering_angle_target = 4; /* bit 24-31 */	
    uint8 brake_hydr_actual = 5; /* bit 32-39 */	
    uint8 brake_hydr_target = 6; /* bit 40-47 */	
    int8 motor_moment_actual = 7; /* bit 48-55 */	
    int8 motor_moment_target = 8; /* bit 56-63 */
}	

/* Required ID: 0x501 */	
/* size 6 bytes */	
message DrivingDynamics2 {	
    int16 acceleration_longitudinal = 1; /* bit 0-15      1/512 scale */	
    int16 acceleration_lateral = 2; /* bit 16-31          1/512 scale */	
    int16 yaw_rate = 3; /* bit 32-47                      1/128 scale */	
}	

/* Required ID: 0x502 */	
/* size 5 Bytes */	
message SystemStatus {	
    AS_State as_state = 1; /* bit 0-2 */	
    EBS_State ebs_state = 2; /* bit 3-4 */	
    AMI_State ami_state = 3; /* bit 5-7 */	
    bool steering_state = 4; /* bit 8 */	
    Service_Brake_State service_brake_state = 5; /* bit 9-10*/	
    uint4 lap_counter = 6; /* bit 11-14 */	
    uint8 Cones_count_actual = 7; /* bit 15-22 */	
    uint17 Cones_count_all = 8; /* bit 23-39 (17 bits) */	
}	

enum AS_State : uint3 {
    AS_state_off = 0;	
    AS_state_ready = 1;	
    AS_state_driving = 2;	
    AS_state_emergency_brake = 3;	
    AS_state_finish = 4;	
}	

enum EBS_State : uint2 {
    EBS_state_unavailable = 0;	
    EBS_state_armed = 1;	
    EBS_state_activated = 2;	
}	

enum AMI_State : uint3 {
    AMI_state_acceleration = 0;	
    AMI_state_skidpad = 1;	
    AMI_state_trackdrive = 2;	
    AMI_state_braketest = 3;	
    AMI_state_inspection = 4;	
    AMI_state_autocross = 5;	
}	

enum Service_Brake_State : uint2 {
    Steering_state = 0;	
    Service_brake_state_disengaged = 1;	
    Service_brake_state_engaged = 2;	
    Service_brake_state_available = 3;	
}
